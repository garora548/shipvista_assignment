{"version":3,"sources":["actions/plantApi.js","actions/plants.js","reducers/plantReducer.js","reducers/index.js","actions/store.js","staticData/status.js","components/plantList.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","url","fetchAll","axios","get","fetchById","id","create","newPlant","post","update","updatePlant","put","delete","ACTION_TYPES","intialState","list","reducers","combineReducers","plantReducer","state","action","type","payload","p","map","x","filter","store","createStore","compose","applyMiddleware","thunk","WATERING","mapActionToProps","fetchAllPlants","dispatch","api","then","response","data","catch","err","console","log","createPlant","onSuccess","connect","plantList","props","useState","name","setName","timeoutId","setTimeoutId","hourLimit","rec","useEffect","start","record","Date","lastWatered","plant","status","timeOutId","setTimeout","plantWatered","alert","stop","clearTimeout","window","location","className","onSubmit","evt","preventDefault","required","value","onChange","e","target","index","currentTime","recordTime","diff","Math","abs","style","toLocaleString","toFixed","href","onClick","App","path","exact","component","PlantList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1819b079.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseUrl = \"http://localhost:49423/api\"\r\n\r\nexport default{\r\n    plantApiMethods(url = baseUrl + \"/plant/\"){\r\n        return {\r\n            fetchAll: () => axios.get(url),\r\n            fetchById: id => axios.get(url + id ),\r\n            create : newPlant => axios.post(url, newPlant),\r\n            update : (id, updatePlant) => axios.put(url +id, updatePlant),\r\n            delete : id => axios.delete(url + id)\r\n        }\r\n    }\r\n\r\n}","import api from \"./plantApi\"\r\n\r\nexport const ACTION_TYPES = {\r\n    CREATE : 'CREATE',\r\n    UPDATE : 'UPDATE',\r\n    DELETE : 'DELETE',\r\n    FETCH_ALL : 'FETCH_ALL'\r\n}\r\n\r\nexport const fetchAll = () => dispatch => {\r\n    api.plantApiMethods().fetchAll()\r\n    .then(response => {\r\n        dispatch({\r\n            type: ACTION_TYPES.FETCH_ALL,\r\n            payload: response.data\r\n        })\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\nexport const create = (data, onSuccess) => dispatch => {\r\n\r\n    api.plantApiMethods().create(data)\r\n    .then(response => {\r\n         dispatch({\r\n             type: ACTION_TYPES.CREATE,\r\n             payload: response.data\r\n         })\r\n         onSuccess()\r\n    })\r\n    .catch(err => console.log(err))\r\n} \r\n\r\nexport const update = (id,data, onSuccess) => dispatch => {\r\n\r\n    api.plantApiMethods().update(id,data)\r\n    .then(response => {\r\n         dispatch({\r\n             type: ACTION_TYPES.UPDATE,\r\n             payload: {id,...data}\r\n         })\r\n         onSuccess()\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\nexport const Delete = (id, onSuccess) => dispatch => {\r\n\r\n    api.plantApiMethods().delete(id)\r\n    .then(response => {\r\n         dispatch({\r\n             type: ACTION_TYPES.DELETE,\r\n             payload: id\r\n         })\r\n         onSuccess()\r\n    })\r\n    .catch(err => console.log(err))\r\n}","import {ACTION_TYPES} from \"../actions/plants\";\r\nconst intialState   = {\r\n    list:[]\r\n}\r\n\r\nexport const plantReducer = (state = intialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.FETCH_ALL:\r\n            return {\r\n                ...state,\r\n                list:[...action.payload ]\r\n            }    \r\n        case ACTION_TYPES.CREATE :\r\n           return  {\r\n                ...state,\r\n                list: [...state.list, action.p]\r\n            }\r\n        case ACTION_TYPES.UPDATE :\r\n         return  {\r\n                 ...state,\r\n                 list: state.list.map(x=>x.id == action.payload.id ? action.payload: x)\r\n               }\r\n         case ACTION_TYPES.DELETE :\r\n             return  {\r\n            ...state,\r\n            list: state.list.filter(x=> x.id != action.payload.id)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport {plantReducer} from \"./plantReducer\";\r\n\r\nexport const reducers = combineReducers({\r\n    plantReducer\r\n})","    import {createStore, applyMiddleware, compose} from \"redux\";\r\n    import thunk from \"redux-thunk\";\r\n    import {reducers} from \"../reducers/index\";\r\n    \r\n    export const store = createStore(\r\n        reducers,\r\n        compose(\r\n            applyMiddleware(thunk)\r\n        )\r\n    )\r\n","export const WATERING = 'Watering';\r\nexport const NOT_WATERED = 'Not Watered';\r\nexport const WATERED = 'Watered';\r\nexport const STOPPED = 'Stopped';\r\n","import React, {useState, useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport * as actions from \"../actions/plants\";\r\nimport * as status from \"../staticData/status\";\r\nimport \"../css/main.css\";\r\n\r\n\r\nconst PlantList = (props) => { \r\n    const [name, setName] = useState(\"\");\r\n    const [timeoutId, setTimeoutId] = useState(0);\r\n    const [hourLimit, setHourLimit] = useState(6);\r\n    var rec = null;\r\n\r\n    useEffect(()=> {\r\n    props.fetchAllPlants();\r\n    } ,[])\r\n    const onSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        const plant = {\r\n            name: name,\r\n            status: status.NOT_WATERED,\r\n            lastWatered: null\r\n        }\r\n        props.createPlant(plant, () => alert(\"Plant added\"));\r\n        window.location = \"/\";\r\n    }\r\n    \r\n    const start = (record) => {\r\n        var currentTime = new Date();\r\n        var recordTime = new Date(record.lastWatered);\r\n        var difference = (currentTime - recordTime) / 1000;\r\n        if(difference > 30){\r\n        const plant = {\r\n            name: record.name,\r\n            status: status.WATERING,\r\n            lastWatered: record.lastWatered\r\n        }\r\n        props.updatePlant(record.id,plant,()=>console.log(\"Started Watering\"));\r\n        rec = record;\r\n        var timeOutId = setTimeout(plantWatered,10000);   \r\n        setTimeoutId(timeOutId);\r\n    }\r\n    else\r\n    {\r\n        alert(\"You cannot water the plant within 30 seconds\");\r\n    }\r\n        \r\n         \r\n    }\r\n\r\n    const plantWatered = () => {\r\n        const plant = {\r\n            name: rec.name,\r\n            status: status.WATERED,\r\n            lastWatered: new Date()\r\n        }\r\n        props.updatePlant(rec.id,plant,()=>console.log(\"Done Watering\"));\r\n    }\r\n\r\n    const stop = (record) => {\r\n    if(record.status == status.WATERING)\r\n    {\r\n        clearTimeout(timeoutId);\r\n        const plant = {\r\n            name: record.name,\r\n            status: status.STOPPED,\r\n            lastWatered: record.lastWatered\r\n        }\r\n        props.updatePlant(record.id,plant,()=>console.log(\"Watering Stopped\"));\r\n        window.location = \"#\"\r\n    }\r\n    else{\r\n        alert(\"Plant is not in watering state right now\");\r\n    }\r\n\r\n    }\r\n\r\n    return (    \r\n        <div className=\"container\">\r\n        <br/>\r\n\r\n        <h3>Add Plant</h3>\r\n        <form onSubmit={onSubmit}>\r\n          <div className=\"form-group\"> \r\n            <label>Name: </label>\r\n             <input  type=\"text\"\r\n                required\r\n                className=\"form-control\"\r\n                value={name}\r\n                onChange={e => setName(e.target.value)}\r\n                />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input type=\"submit\" value=\"Add Plant\" className=\"btn btn-dark\" />\r\n          </div>\r\n        </form>\r\n\r\n           <h3>Plants</h3>\r\n     <table className=\"table\">\r\n       <thead className=\"thead-light\">\r\n         <tr>\r\n           <th>Name</th>\r\n           <th>Last Watered</th>\r\n           <th>Hours of Last Watered</th>\r\n           <th>Status</th>\r\n           <th>Actions</th>\r\n         </tr>\r\n       </thead>\r\n       <tbody>\r\n       {\r\n        props.plantList.map((record, index)=>{\r\n            var currentTime = new Date();\r\n            var recordTime = new Date(record.lastWatered);\r\n            var diff = record.lastWatered != null ? Math.abs(currentTime - recordTime) / (60*60*1000) : null;\r\nif(diff > hourLimit)\r\n{\r\n         return (<tr key = {index} style = {{ 'backgroundColor': '#ff1a1a', 'color' : 'black' }}> \r\n         <td>{record.name}</td>\r\n         <td>{record.lastWatered == null ? null : (new Date(record.lastWatered)).toLocaleString()}</td>\r\n         <td>{ diff != null ? diff.toFixed(2) : null }</td>\r\n         <td>{record.status}</td>\r\n         <td><a href=\"#\"  onClick={() => { start(record) }} style ={{'color' : 'black', 'fontWeight': 'bold'}} >Start</a> | \r\n         <a href=\"#\" onClick={() => { stop(record) }} style ={{'color' : 'black', 'fontWeight': 'bold'}}>Stop</a></td>\r\n         </tr>)\r\n}\r\n    else{\r\n    return (<tr key = {index} style = {{ 'backgroundColor': '#DAD7D7', 'color' : 'black' }}> \r\n    <td>{record.name}</td>\r\n    <td>{record.lastWatered == null ? null : (new Date(record.lastWatered)).toLocaleString()}</td>\r\n    <td>{ diff != null ? diff.toFixed(2) : null  }</td>\r\n    <td>{record.status}</td>\r\n    <td><a href=\"#\"  onClick={() => { start(record) }} style ={{'color' : 'black', 'fontWeight': 'bold'}} >Start</a> | \r\n    <a href=\"#\" onClick={() => { stop(record) }} style ={{'color' : 'black', 'fontWeight': 'bold'}}>Stop</a></td>\r\n    </tr>)\r\n    }\r\n   })\r\n }\r\n       </tbody>\r\n     </table>\r\n     </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state=>{\r\n    return{\r\n        plantList : state.plantReducer.list\r\n    }\r\n}\r\n\r\nconst mapActionToProps ={\r\n    fetchAllPlants: actions.fetchAll,\r\n    createPlant: actions.create,\r\n    updatePlant: actions.update\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(PlantList)","import './App.css';\nimport { store } from \"./actions/store\";\nimport { Provider } from \"react-redux\";\nimport PlantList from \"./components/plantList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n<Provider store = {store}>\n  <Router>\n    <div className = \"container\">\n  <Route path=\"/\" exact component={PlantList} />\n  </div>\n  </Router>\n  \n\n</Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}